AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Mappings:
  Configuration:
    dev:
      IPVStubID: 5C584572
    build:
      IPVStubID: BD7B2A5D
    staging:
      IPVStubID: 9CDA6F61
    integration:
      IPVStubID: AE140E43
    production:
      IPVStubID: C910A762
Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: none
    Description: 'The ARN of the Code Signing Config to use, provided by the deployment
      pipeline. Mandatory if using Lambda create function permissions.

      '
  Environment:
    Description: The environment type
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - build
    - staging
    - integration
    ConstraintDescription: must be dev, build, staging, or integration
  BackendStack:
    Description: The stack name of the API stack under test
    Default: cic-cri-api
    Type: String
  FrontendStack:
    Description: The stack name of the Frontend stack under test
    Default: cic-cri-front
    Type: String
  VpcStackName:
    Description: 'The name of the stack that defines the VPC in which this container
      will run. This should stop anyone not on the GDS VPN or internal to AWS from  calling
      this stuff.

      '
    Default: vpc-cri
    Type: String
  PermissionsBoundary:
    Description: The ARN of the permissions boundary to apply when creating IAM roles.
      Mandatory.
    Type: String
    Default: none
Conditions:
  CreateDevResources:
    Fn::Equals:
    - Ref: Environment
    - dev
  UsePermissionsBoundary:
    Fn::Not:
    - Fn::Equals:
      - Ref: PermissionsBoundary
      - none
Globals:
  Function:
    Tracing: Active
    MemorySize: 512
    Runtime: nodejs18.x
    Timeout: 60
    Tags:
      API:
        Fn::Sub: ${AWS::StackName}-test-resource
    CodeSigningConfigArn:
      Fn::If:
      - CreateDevResources
      - Ref: AWS::NoValue
      - Ref: CodeSigningConfigArn
Resources:
  IPVStubLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: LambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kms:Sign
            - kms:GetPublicKey
            Resource:
            - Fn::GetAtt:
              - IPVStubKMSSigningKey
              - Arn
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - arn:aws:logs:*:*:*
      PermissionsBoundary:
        Fn::If:
        - UsePermissionsBoundary
        - Ref: PermissionsBoundary
        - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
  IPVStubApiGw:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: IPVStub-${Environment}-${AWS::StackName}
      Description:
        Fn::Sub: Claimed Identity Credential Issuer (CIC) IPVStub API. ${AWS::StackName}
      Policy: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":"*","Action":"execute-api:Invoke","Resource":["execute-api:/*"]}]}

        '
      Parameters:
        endpointConfigurationTypes: REGIONAL
  RedirectPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: IPVStubApiGw
      ParentId:
        Fn::GetAtt:
        - IPVStubApiGw
        - RootResourceId
      PathPart: redirect
  RedirectMethodGet:
    DependsOn:
    - RedirectPath
    - IPVStubRedirectFunction
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: IPVStubApiGw
      ResourceId:
        Ref: RedirectPath
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ':apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - IPVStubRedirectFunction
              - Arn
            - /invocations
        IntegrationResponses:
        - StatusCode: 200
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 400
      - StatusCode: 500
  WellKnownPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: IPVStubApiGw
      ParentId:
        Fn::GetAtt:
        - IPVStubApiGw
        - RootResourceId
      PathPart: .well-known
  JwksJSONFile:
    DependsOn:
    - WellKnownPath
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: IPVStubApiGw
      ParentId:
        Ref: WellKnownPath
      PathPart: jwks.json
  JwksMethodGet:
    DependsOn:
    - JwksJSONFile
    - JwksFunction
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: IPVStubApiGw
      ResourceId:
        Ref: JwksJSONFile
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ':apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - JwksFunction
              - Arn
            - /invocations
        IntegrationResponses:
        - StatusCode: 200
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 400
      - StatusCode: 500
  StartCICPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: IPVStubApiGw
      ParentId:
        Fn::GetAtt:
        - IPVStubApiGw
        - RootResourceId
      PathPart: start
  StartCICMethodGet:
    DependsOn:
    - StartCICPath
    - StartCICCheckFunction
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: IPVStubApiGw
      ResourceId:
        Ref: StartCICPath
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:'
            - Ref: AWS::Partition
            - ':apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - StartCICCheckFunction
              - Arn
            - /invocations
        IntegrationResponses:
        - StatusCode: 200
      MethodResponses:
      - StatusCode: 200
      - StatusCode: 400
      - StatusCode: 500
  IPVStubApiGwDeployment:
    DependsOn:
    - RedirectMethodGet
    - JwksMethodGet
    - StartCICMethodGet
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: IPVStubApiGw
      Description: This resource deploys an API Gateway RestApi resource to a stage
        so that clients can call the API over the internet
      StageName:
        Fn::Sub: ${Environment}
      StageDescription:
        AccessLogSetting:
          DestinationArn:
            Fn::GetAtt:
            - IPVStubApiAccessLogGroup
            - Arn
          Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
            "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod",
            "path": "$context.path", "routeKey":"$context.routeKey", "status":"$context.status",
            "protocol":"$context.protocol", "responseLength":"$context.responseLength"
            }'
        DataTraceEnabled: true
        LoggingLevel: INFO
        TracingEnabled: true
  IPVStubApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/apigateway/AccessLog-IPVStubApiGateway-${AWS::StackName}/${Environment}
      RetentionInDays: 30
  StartCICCheckFunction:
    DependsOn:
    - StartCICCheckFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: StartCICCheckFunction-${AWS::StackName}
      Handler: startCicCheck.handler
      CodeUri: StartCICCheckFunction
      Environment:
        Variables:
          SIGNING_KEY:
            Ref: IPVStubKMSSigningKey
          CLIENT_ID:
            Fn::FindInMap:
            - Configuration
            - Ref: Environment
            - IPVStubID
          REDIRECT_URI:
            Fn::Sub:
            - https://${testRedirectUri}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/redirect
            - testRedirectUri:
                Ref: IPVStubApiGw
          JWKS_URI:
            Fn::Sub: https://${IPVStubApiGw}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/.well-known/jwks.json
          OIDC_FRONT_BASE_URI:
            Fn::Sub:
            - $https://${ImportProviderStack}.execute-api.${AWS::Region}.amazonaws.com/
            - ImportProviderStack:
                Fn::ImportValue:
                  Fn::Sub: ${FrontendStack}-CICFrontGatewayId
          NODE_OPTIONS: ' --enable-source-maps'
      Policies:
      - Statement:
        - Sid: KMSSignPolicy
          Effect: Allow
          Action:
          - kms:Sign
          Resource:
          - Fn::GetAtt:
            - IPVStubKMSSigningKey
            - Arn
      Role:
        Fn::GetAtt:
        - IPVStubLambdaRole
        - Arn
      PermissionsBoundary:
        Fn::If:
        - UsePermissionsBoundary
        - Ref: PermissionsBoundary
        - Ref: AWS::NoValue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - startCicCheck.ts
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: StartCICCheckFunction
  StartCICCheckFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName:
        Fn::Sub: /aws/lambda/StartCICCheckFunction-${AWS::StackName}
  StartCICCheckFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - StartCICCheckFunction
        - Arn
      Principal: apigateway.amazonaws.com
  JwksFunction:
    DependsOn:
    - JwksFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: IPVStubJWKS-${AWS::StackName}
      Handler: jsonWebKeys.handler
      CodeUri: JwksFunction
      Environment:
        Variables:
          SIGNING_KEY:
            Ref: IPVStubKMSSigningKey
          NODE_OPTIONS: ' --enable-source-maps'
      Policies:
      - Statement:
        - Sid: KMSSignPolicy
          Effect: Allow
          Action:
          - kms:GetPublicKey
          Resource:
          - Fn::GetAtt:
            - IPVStubKMSSigningKey
            - Arn
      Role:
        Fn::GetAtt:
        - IPVStubLambdaRole
        - Arn
      PermissionsBoundary:
        Fn::If:
        - UsePermissionsBoundary
        - Ref: PermissionsBoundary
        - Ref: AWS::NoValue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - jsonWebKeys.ts
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: JwksFunction
  JwksFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - JwksFunction
        - Arn
      Principal: apigateway.amazonaws.com
  JwksFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName:
        Fn::Sub: /aws/lambda/IPVStubJWKS-${AWS::StackName}
  IPVStubRedirectFunction:
    DependsOn:
    - IPVStubRedirectFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: IPVStubRedirect-${AWS::StackName}
      Handler: callback.handler
      CodeUri: IPVStubRedirectFunction
      Role:
        Fn::GetAtt:
        - IPVStubLambdaRole
        - Arn
      Environment:
        Variables:
          NODE_OPTIONS: ' --enable-source-maps'
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
        - callback.ts
        Minify: true
        Sourcemap: true
        Target: es2020
      SamResourceId: IPVStubRedirectFunction
  IPVStubRedirectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - IPVStubRedirectFunction
        - Arn
      Principal: apigateway.amazonaws.com
  IPVStubRedirectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName:
        Fn::Sub: /aws/lambda/IPVStubRedirect-${AWS::StackName}
  IPVStubKMSSigningKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for testing signing KMS integration in the development
        account.
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
          Action:
          - kms:*
          Resource:
          - '*'
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      MultiRegion: false
      PendingWindowInDays: 7
      Tags:
      - Key: KeyType
        Value: Test Signing Key
      - Key: Environment
        Value:
          Fn::Sub: ${Environment}
  ProviderBaseUri:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The Base URI from backend stack to test
      Name:
        Fn::Sub: /${Environment}/${AWS::StackName}/API/PROVIDER_BASE_URI
      Type: String
      Value:
        Fn::Sub:
        - $https://${ImportProviderStack}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
        - ImportProviderStack:
            Fn::ImportValue:
              Fn::Sub: ${BackendStack}-CICApiGatewayId
      Tags:
        APP:
          Fn::Sub: cic-${AWS::StackName}
  IPVStubId:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The ID that identifies the client
      Name:
        Fn::Sub: /${Environment}/${AWS::StackName}/API/TEST_CLIENT_ID
      Type: String
      Value:
        Fn::FindInMap:
        - Configuration
        - Ref: Environment
        - IPVStubID
      Tags:
        APP:
          Fn::Sub: cic-${AWS::StackName}
  RedirectEndpointUri:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The Redirect URI
      Name:
        Fn::Sub: /${Environment}/${AWS::StackName}/API/TEST_CLIENT_REDIRECT_ENDPOINT
      Type: String
      Value:
        Fn::Sub:
        - https://${testRedirectUri}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/redirect
        - testRedirectUri:
            Ref: IPVStubApiGw
      Tags:
        APP:
          Fn::Sub: cic-${AWS::StackName}
  IPVStubSigningKey:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The Base URI from backend stack to test
      Name:
        Fn::Sub: /${Environment}/${AWS::StackName}/API/TEST_CLIENT_SIGNING_KEY
      Type: String
      Value:
        Ref: IPVStubKMSSigningKey
      Tags:
        APP:
          Fn::Sub: cic-${AWS::StackName}
  IPVStubJwksEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The Base URI from backend stack to test
      Name:
        Fn::Sub: /${Environment}/${AWS::StackName}/API/TEST_CLIENT_JWKS_ENDPOINT
      Type: String
      Value:
        Fn::Sub: https://${IPVStubApiGw}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/.well-known/jwks.json
      Tags:
        APP:
          Fn::Sub: cic-${AWS::StackName}
Outputs:
  APIGWExecuteUrl:
    Description: API Gateway endpoint URL for the environment stage
    Value:
      Fn::Sub: https://${IPVStubApiGw}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-APIGWExecuteUrl
  APIGWID:
    Description: The ID of the API Gateway
    Value:
      Ref: IPVStubApiGw
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-APIGWID
