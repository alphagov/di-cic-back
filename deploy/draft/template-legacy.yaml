AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Digital Identity IPV CRI CIC API"

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: Please ensure that your Environment variable is set to either dev, build, staging, integration or production.
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  SecretPrefix:
    Type: String
    Default: "none"
    Description: Secrets name prefix

  # AuditEventNamePrefix:
  #   Description: "The audit event name prefix"
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: "/common-cri-parameters/AuditEventNamePrefix"
  # CriIdentifier:
  #   Description: "The unique credential issuer identifier"
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: "/common-cri-parameters/CriIdentifier"
  CommonStackName:
    Description: "The name of the stack containing the common CRI lambdas/infra"
    Type: String
    Default: "common-cri-api"

Mappings:
  EnvironmentConfiguration: # This is where you store per-environment settings.
    dev:  
      logretentionindays: 3
      apiTracingEnabled: true
    build:
      logretentionindays: 3
      apiTracingEnabled: true
    staging:
      logretentionindays: 3
      apiTracingEnabled: true
    integration:
      logretentionindays: 30
      apiTracingEnabled: false
    production:
      logretentionindays: 30
      apiTracingEnabled: false
  EnvironmentVariables: # This is all the environment specific environment variables that don't belong in globals.
    dev:
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes
    build: 
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes
    staging: 
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes
    integration: 
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes
    production: 
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes

Conditions:
  CreateDevResources: !Equals
    - !Ref Environment
    - dev
  IsProdLikeEnvironment: !Or
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
    - !Equals [ !Ref Environment, production ]
  IsDevEnvironment: !Equals
    - !Ref Environment
    - dev
  IsNotDevEnvironment: !Not
    - Condition: IsDevEnvironment
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseSecretPrefix:
    Fn::Not:
      - Fn::Equals:
          - !Ref SecretPrefix
          - "none"

Globals:
  Function:
    VpcConfig:
      SecurityGroupIds:
        - !ImportValue cri-vpc-LambdaSecurityGroup
      SubnetIds: !Split [ ",", !ImportValue cri-vpc-PrivateSubnets ]
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - CreateDevResources
      - !Ref AWS::NoValue
      - !Ref CodeSigningConfigArn
    Timeout: 30 # seconds
    Tracing: Active
    MemorySize: 1024
    Architectures:
      - arm64
    Environment:
      Variables:
        # These should always be alphabetically organised.
        AWS_STACK_NAME: !Sub ${AWS::StackName}  # The AWS Stack Name, as passed into the template.
        COMMON_PARAMETER_NAME_PREFIX: !Ref CommonStackName  # What is this? @TODO
        POWERTOOLS_LOG_LEVEL: INFO  # The LogLevel for the AWS PowerTools LogHelper
        POWERTOOLS_METRICS_NAMESPACE: CIC-CRI # The Metric Namespace for the AWS PowerTools MetricHelper
        SECRET_PREFIX: !If [UseSecretPrefix, !Ref SecretPrefix , !Ref AWS::StackName]  # What is this? @TODO
        SQS_AUDIT_EVENT_PREFIX: CIC-F2F # The prefix to add to TxMA event messages
    AutoPublishAlias: live
    
    # # Start ProvisionedConcurrency Block     
    # # This should not be a global setting, as this is set per-lambda.
    # # It should never be needed for Typescript lambdas.
    # ProvisionedConcurrencyConfig:
    #   !If
    #   - AddProvisionedConcurrency
    #   - ProvisionedConcurrentExecutions: !FindInMap [ EnvironmentConfiguration, !Ref Environment,  ]
    #   - !Ref AWS::NoValue

    # # End ProvisionedConcurrency Block 



Resources:
  PublicCICApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: Public CIC CRI API
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'
          # Disable data trace in production to avoid logging customer sensitive information
          DataTraceEnabled: !FindInMap [ EnvironmentConfiguration, !Ref Environment, apiTracingEnabled]
          MetricsEnabled: true
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      AccessLogSetting:
        DestinationArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${PublicCICApiAccessLogGroup}'
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      TracingEnabled: true
      Name: !Sub "${AWS::StackName}-PublicCICApi"
      StageName: !Ref Environment
      DefinitionBody:
        openapi: "3.0.1" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: { } # workaround to get `sam validate` to work
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './spec/public-api.yaml'
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: REGIONAL

  PrivateCICApi:
    Type: AWS::Serverless::Api
    Condition: IsNotDevEnvironment
    Properties:
      Description: Private CIC CRI API
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'
          # Disable data trace in production to avoid logging customer sensitive information
          DataTraceEnabled: !FindInMap [ EnvironmentConfiguration, !Ref Environment, apiTracingEnabled ]
          MetricsEnabled: true
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      AccessLogSetting:
        DestinationArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${PrivateCICApiAccessLogGroup}'
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      TracingEnabled: true
      Name: !Sub "${AWS::StackName}-PrivateCICApi"
      StageName: !Ref Environment
      DefinitionBody:
        openapi: "3.0.1" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: { } # workaround to get `sam validate` to work
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './spec/private-api.yaml'
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: PRIVATE
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Action: 'execute-api:Invoke'
              Effect: Allow
              Principal: '*'
              Resource:
                - 'execute-api:/*'
            - Action: 'execute-api:Invoke'
              Effect: Deny
              Principal: '*'
              Resource:
                - 'execute-api:/*'
              Condition:
                StringNotEquals:
                  aws:SourceVpce: !If
                    - CreateDevResources
                    - vpce-082cab7c78139eb54
                    - !ImportValue cri-vpc-ApiGatewayVpcEndpointId

  DevOnlyCICApi:
    Type: AWS::Serverless::Api
    Condition: IsDevEnvironment
    Properties:
      Description: Dev Only Private CIC CRI API
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'
          DataTraceEnabled: !FindInMap [ EnvironmentConfiguration, !Ref Environment, apiTracingEnabled]
          MetricsEnabled: true
          ThrottlingRateLimit: 5
          ThrottlingBurstLimit: 10
      AccessLogSetting:
        DestinationArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${DevOnlyCICApiAccessLogGroup}'
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      TracingEnabled: true
      Name: !Sub "${AWS::StackName}-PrivateCICApi"
      StageName: !Ref Environment
      DefinitionBody:
        openapi: "3.0.1" # workaround to get `sam validate` to work
        paths: # workaround to get `sam validate` to work
          /never-created:
            options: { } # workaround to get `sam validate` to work
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './spec/private-api.yaml'
      OpenApiVersion: 3.0.1
      EndpointConfiguration:
        Type: REGIONAL

  PublicCICApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-public-AccessLogs
      RetentionInDays: !FindInMap [ EnvironmentConfiguration, !Ref Environment, logretentionindays ]

  PublicCICApiAccessLogGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref PublicCICApiAccessLogGroup

  PrivateCICApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsNotDevEnvironment
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-private-AccessLogs
      RetentionInDays: !FindInMap [ EnvironmentConfiguration, !Ref Environment, logretentionindays ]

  DevOnlyCICApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsDevEnvironment
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-devonly-private-AccessLogs
      RetentionInDays: !FindInMap [ EnvironmentConfiguration, !Ref Environment, logretentionindays ]

  PrivateCICApiAccessLogGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref PrivateCICApiAccessLogGroup
# commented out propertise for codebuld to pass
  APIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !FindInMap [ EnvironmentConfiguration, !Ref Environment, logretentionindays ]
      # KmsKeyId: !GetAtt HelloWorldKmsKey.Arn
      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Dev Platform
        - Key: Environment
          Value: Demo
        - Key: Service
          Value: backend
        - Key: Name
          Value: APIGatewayAccessLogGroup
        # - Key: Source
        #   Value: alphagov/di-devplatform-demo-sam-app/sam-app/template.yaml

  HelloWorldRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      AccessLogSetting:
        Format: "$context.requestId $context.httpMethod $context.path"
        DestinationArn: !GetAtt APIGatewayAccessLogGroup.Arn
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './spec/private-api.yaml'
      TracingEnabled: true
      Tags:
        Product: GOV.UK Sign In
        System: F2F
        Environment: !Ref Environment
        Service: backend
        Name: HelloWorldRestApi
        Source: alphagov/di-devplatform-demo-sam-app/sam-app/template.yaml

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "HelloWorld-${AWS::StackName}"
      Handler: app.lambdaHandler
      CodeUri: ../src/
      Runtime: nodejs16.x
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: F2F CRI
          EXAMPLE: !FindInMap [ EnvironmentVariables, !Ref Environment, EXAMPLE ]
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParametersByPath
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/clients/*"  # Need to document where this SSM param is coming from...
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
        - app.ts  
    # Added this block to allow the sam local start-api command to work.
    Events:
      APILink:
        Type: Api
        Properties:
          Path: /hello
          Method: get
          RestApiId: !Ref HelloWorldRestApi

  HelloWorldFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/HelloWorld-${AWS::StackName}"
      RetentionInDays: !FindInMap [ EnvironmentConfiguration, !Ref Environment, logretentionindays ]

  HelloWorldFunctionLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref HelloWorldFunctionLogGroup

#  IssueCredentialFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: uk.gov.di.ipv.cri.CIC.api.handler.IssueCredentialHandler::handleRequest
#      CodeUri: ../../lambdas/issuecredential
#      Environment:
#        Variables:
#          POWERTOOLS_SERVICE_NAME: !Sub "${CriIdentifier}-issuecredential"
#          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
#      Policies:
#        - AWSLambdaBasicExecutionRole
#        - AWSXrayWriteOnlyAccess
#        - DynamoDBReadPolicy:
#            TableName: !Sub "{{resolve:ssm:/${CommonStackName}/SessionTableName}}"
#        - DynamoDBReadPolicy:
#            TableName: !Ref CICTable
#        - Statement:
#            Effect: Allow
#            Action:
#              - "kms:Sign"
#            Resource: !ImportValue core-infrastructure-CriVcSigningKey1Arn
#        - SQSSendMessagePolicy:
#            QueueName: !ImportValue AuditEventQueueName
#        - Statement:
#            Effect: Allow
#            Action:
#              - ssm:GetParameter
#            Resource:
#              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/CICTableName"
#              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/MaxJwtTtl"
#              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/JwtTtlUnit"
#              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/verifiableCredentialKmsSigningKeyId"
#              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/SessionTableName"
#              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CommonStackName}/verifiable-credential/issuer"
#        - Statement:
#            Effect: Allow
#            Action:
#              - kms:Decrypt
#              - kms:GenerateDataKey
#            Resource:
#              - !ImportValue AuditEventQueueEncryptionKeyArn
#
#  IssueCredentialFunctionLogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub "/aws/lambda/${IssueCredentialFunction}"
#      RetentionInDays: 30
#
#  IssueCredentialFunctionLogsSubscriptionFilterCSLS:
#    Type: AWS::Logs::SubscriptionFilter
#    Condition: IsNotDevEnvironment
#    Properties:
#      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
#      FilterPattern: ""
#      LogGroupName: !Ref IssueCredentialFunctionLogGroup

  PublicCICApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Condition: IsNotDevEnvironment
    DependsOn:
      - PublicCICApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref PublicCICApi
          Stage: !Ref Environment
      Quota:
        Limit: 500000
        Period: DAY
      Throttle:
        BurstLimit: 100 # requests the API can handle concurrently
        RateLimit: 50 # allowed requests per second

  PrivateCICApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Condition: IsNotDevEnvironment
    DependsOn:
      - PrivateCICApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref PrivateCICApi
          Stage: !Ref Environment
      Quota:
        Limit: 500000
        Period: DAY
      Throttle:
        BurstLimit: 100 # requests the API can handle concurrently
        RateLimit: 50 # allowed requests per second

  LinkUsagePlanApiKey1:
    Type: AWS::ApiGateway::UsagePlanKey
    Condition: IsNotDevEnvironment
    Properties:
      KeyId: !ImportValue core-infrastructure-ApiKey1
      KeyType: API_KEY
      UsagePlanId: !Ref PublicCICApiUsagePlan

  LinkUsagePlanApiKey2:
    Type: AWS::ApiGateway::UsagePlanKey
    Condition: IsNotDevEnvironment
    Properties:
      KeyId: !ImportValue core-infrastructure-ApiKey2
      KeyType: API_KEY
      UsagePlanId: !Ref PublicCICApiUsagePlan

  MaxJwtTtlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/MaxJwtTtl"
      Type: String
      Value: 2
      Description: default time to live for an JWT in (seconds)

  JwtTtlUnitParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/JwtTtlUnit"
      Type: String
      Value: HOURS
      Description: The unit for the time-to-live for an JWT e.g. (MONTHS)

  HelloWorldFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HelloWorldFunction.Alias
      Principal: apigateway.amazonaws.com

#  IssueCredentialFunctionPermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: lambda:InvokeFunction
#      FunctionName: !Ref IssueCredentialFunction.Alias
#      Principal: apigateway.amazonaws.com

  CICLambdaErrors:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub CIC ${Environment} lambda errors
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
      OKActions:
        - !ImportValue core-infrastructure-AlarmTopic
      InsufficientDataActions: []
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions: []
      Period: 300
      DatapointsToAlarm: 3
      EvaluationPeriods: 3
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  CICAPIGW5XXErrors:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub CIC ${Environment} API Gateway 5XX errors
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
      OKActions:
        - !ImportValue core-infrastructure-AlarmTopic
      InsufficientDataActions: []
      DatapointsToAlarm: 3
      EvaluationPeriods: 3
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Expression1
          ReturnData: true
          Expression: SUM(METRICS())
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName}-PublicCICApi"
            Period: 300
            Stat: Sum
        - Id: m2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName}-PrivateCICApi"
            Period: 300
            Stat: Sum

  CICAPIGW4XXErrors:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub CIC ${Environment} API Gateway 4XX errors
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue core-infrastructure-AlarmTopic
      OKActions:
        - !ImportValue core-infrastructure-AlarmTopic
      InsufficientDataActions: []
      DatapointsToAlarm: 3
      EvaluationPeriods: 3
      Threshold: 2
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Expression1
          ReturnData: true
          Expression: SUM(METRICS())
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName}-PublicCICApi"
            Period: 300
            Stat: Sum
        - Id: m2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName}-PrivateCICApi"
            Period: 300
            Stat: Sum

Outputs:

  StackName:
    Description: "CloudFormation stack name"
    Value: !Sub "${AWS::StackName}"

  CICApiGatewayId:
    Description: "API GatewayID of the CIC CRI API"
    Value: !Sub "${PublicCICApi}"
    Export:
      Name: !Sub ${AWS::StackName}-CICApiGatewayId

  PublicCICApiGatewayId:
    Description: "API GatewayID of the public CIC CRI API"
    Value: !Sub "${PublicCICApi}"
    Export:
      Name: !Sub ${AWS::StackName}-PublicCICApiGatewayId

  PrivateCICApiGatewayId:
    Description: "API GatewayID of the private CIC CRI API"
    Value: !If [IsNotDevEnvironment, !Ref PrivateCICApi, !Ref DevOnlyCICApi]
    Export:
      Name: !Sub ${AWS::StackName}-PrivateCICApiGatewayId

  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${HelloWorldRestApi}.execute-api.${AWS::Region}.amazonaws.com/${HelloWorldRestApi.Stage}/hello"

  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
