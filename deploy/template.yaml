AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Digital Identity IPV CRI CIC API"

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: Ensure environment variable is set to one of dev, build, staging, integration or production.
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  SecretPrefix:
    Type: String
    Default: "none"
    Description: Secrets name prefix
  VpcStackName:
    Type: String
    Default: "vpc-cri"
    Description: The name of the VPC stack deployed.
  L2DynamoStackName:
    Type: String
    Default: "none"
    Description: The name of the L2 DynamoDB stack deployed.
  L3TxMAStackName:
    Type: String
    Default: "none"
    Description: The name of the L3 q stack deployed.

Mappings:
  EnvironmentConfiguration: # This is where you store per-environment settings.
    dev:
      logretentionindays: 3
      apiTracingEnabled: true
    build:
      logretentionindays: 3
      apiTracingEnabled: true
    staging:
      logretentionindays: 3
      apiTracingEnabled: true
    integration:
      logretentionindays: 30
      apiTracingEnabled: false
    production:
      logretentionindays: 30
      apiTracingEnabled: false
  EnvironmentVariables: # This is all the environment specific environment variables that don't belong in globals.
    dev:
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes
    build:
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes
    staging:
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes
    integration:
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes
    production:
      EXAMPLE: 1 # Just here as null values not allowed in tempaltes

Conditions:
  IsProdLikeEnvironment: !Or
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseSecretPrefix:
    Fn::Not:
      - Fn::Equals:
          - !Ref SecretPrefix
          - "none"

Globals:
  Function:
    Runtime: nodejs18.x
    VpcConfig:
      SecurityGroupIds:
        - !GetAtt LambdaEgressSecurityGroup.GroupId
      SubnetIds:
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-PrivateSubnetIdB"
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Timeout: 30 # seconds
    Tracing: Active
    MemorySize: 1024
    Architectures:
      - arm64
    Environment:
      Variables:
        # These should always be alphabetically organised.
        AWS_STACK_NAME: !Sub ${AWS::StackName} # The AWS Stack Name, as passed into the template.
        POWERTOOLS_LOG_LEVEL: INFO # The LogLevel for the AWS PowerTools LogHelper
        POWERTOOLS_METRICS_NAMESPACE: CIC-CRI # The Metric Namespace for the AWS PowerTools MetricHelper
        SECRET_PREFIX: !If [
          UseSecretPrefix,
          !Ref SecretPrefix,
          !Ref AWS::StackName,
        ] # What is this? @TODO
        SQS_AUDIT_EVENT_PREFIX: CIC-F2F # The prefix to add to TxMA event messages
    AutoPublishAlias: live

Resources:
  LambdaEgressSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Permits outbound on port 443 from within the VPC to the internet.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow to the wider internet on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  ### Start of API Gateway definition.

  CICRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      OpenApiVersion: 3.0.1
      AccessLogSetting:
        Format: "$context.requestId $context.httpMethod $context.path"
        DestinationArn: !GetAtt CICAPIGatewayAccessLogGroup.Arn
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './cic-spec.yaml'
        OpenApiVersion: 3.0.1


      TracingEnabled: true
      Tags:
        Product: GOV.UK Sign In
        System: F2F
        Environment: !Ref Environment
        Service: backend
        Name: CICRestApi
        Source: alphagov/di-devplatform-demo-sam-app/sam-app/template.yaml

  CICAPIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]
      # KmsKeyId: !GetAtt HelloWorldKmsKey.Arn
      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Dev Platform
        - Key: Environment
          Value: Demo
        - Key: Service
          Value: backend
        - Key: Name
          Value: APIGatewayAccessLogGroup

  ### End of API Gateway definition.

  ###Â Function Definition

  # ClaimedIdentity
  ClaimedIdentityFunction:
    Type: AWS::Serverless::Function
    DependsOn: ClaimedIdentityFunctionLogGroup
    Properties:
      FunctionName: !Sub "CIC-ClaimedIdentity-${AWS::StackName}"
      Handler: ClaimedIdentityHandler.lambdaHandler
      CodeUri: ../src/
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: ClaimedIdHandler
          SESSION_TABLE:
             Fn::ImportValue:
               !Sub "${L2DynamoStackName}-session-table-name"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue:
                !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue:
                !Sub "${L2DynamoStackName}-session-table-name"
        - KMSDecryptPolicy:
             KeyId:
               Fn::ImportValue:
                 !Sub "${L2DynamoStackName}-session-table-key-id"

      Events:
        claimedIdentity:
          Type: Api
          Properties:
            Path: /claimedIdentity
            Method: post
            RestApiId: !Ref CICRestApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - ClaimedIdentityHandler.ts

  ClaimedIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CIC-ClaimedIdentity-${AWS::StackName}"
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

  ClaimedIdentityFunctionLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProdLikeEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref ClaimedIdentityFunctionLogGroup

  ClaimedIdentityFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ClaimedIdentityFunction
      Principal: apigateway.amazonaws.com

  AuthorizationFunction:
    Type: AWS::Serverless::Function
    DependsOn: AuthorizationFunctionLogGroup
    Properties:
      FunctionName: !Sub "CIC-Authorization-${AWS::StackName}"
      Handler: AuthorizationCodeHandler.lambdaHandler
      CodeUri: ../src/
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: AuthorizationCodeHandler
          SESSION_TABLE:
            Fn::ImportValue:
              !Sub "${L2DynamoStackName}-session-table-name"
          TXMA_QUEUE_URL:
            Fn::ImportValue:
              !Sub "${L3TxMAStackName}-txma-queue-url"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue:
                !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue:
                !Sub "${L2DynamoStackName}-session-table-name"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue:
                !Sub "${L2DynamoStackName}-session-table-key-id"
        - Statement:
            - Effect: Allow
              Action:
                - "sqs:SendMessage"
              Resource:
                Fn::ImportValue:
                  !Sub "${L3TxMAStackName}-txma-queue-arn"
            - Effect: Allow
              Action:
                - "kms:Encrypt"
                - "kms:Decrypt"
                - "kms:GenerateDataKey"
              Resource:
                Fn::ImportValue:
                  !Sub "${L3TxMAStackName}-txma-queue-key-arn"

      Events:
        authorization:
          Type: Api
          Properties:
            Path: /authorization
            Method: get
            RestApiId: !Ref CICRestApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - AuthorizationCodeHandler.ts

  AuthorizationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CIC-Authorization-${AWS::StackName}"
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

  AuthorizationFunctionLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsProdLikeEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref AuthorizationFunctionLogGroup

  AuthorizationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizationFunction
      Principal: apigateway.amazonaws.com

Outputs:
  CICApiGatewayId:
    Description: "API GatewayID of the CIC CRI API"
    Value: !Sub "${CICRestApi}"
    Export:
      Name: !Sub ${AWS::StackName}-CICApiGatewayId
